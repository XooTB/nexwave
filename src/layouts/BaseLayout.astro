---
export interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { title, description = "NexWave - The future of business automation is here", ogImage = "/og-image.jpg" } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />
    
    <title>{title}</title>
  </head>
  <body>
    <slot />
    
    <script>
      // Enhanced animations and interactions
      document.addEventListener('DOMContentLoaded', () => {
        // Intersection Observer for scroll animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-visible');
              
              // Add staggered animation for child elements
              const children = entry.target.querySelectorAll('.stagger-child');
              children.forEach((child, index) => {
                setTimeout(() => {
                  child.classList.add('is-visible');
                }, index * 100);
              });
            }
          });
        }, observerOptions);
        
        // Observe all elements with animation classes
        document.querySelectorAll('.animate-on-scroll').forEach((el) => {
          observer.observe(el);
        });

        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener('click', (e) => {
            e.preventDefault();
            const href = anchor.getAttribute('href');
            if (href) {
              const target = document.querySelector(href);
              
              if (target) {
                const offsetTop = target.getBoundingClientRect().top + window.pageYOffset - 80;
                
                window.scrollTo({
                  top: offsetTop,
                  behavior: 'smooth'
                });
              }
            }
          });
        });

        // Add loading states to forms
        document.querySelectorAll('form').forEach((form) => {
          form.addEventListener('submit', () => {
            const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
            if (submitButton && !submitButton.disabled) {
              submitButton.classList.add('loading');
            }
          });
        });
      });
    </script>
  </body>
</html>

<style>
  html {
    font-family: 'Inter', system-ui, sans-serif;
  }
</style>